from django.shortcuts import render, redirect,get_object_or_404
from django.contrib.auth.forms import UserCreationForm
from .forms import CreateUserForm, UserUpdateForm, ProfileUpdateForm    
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required
from django.urls import reverse
from django.contrib import messages
from django.http import JsonResponse, HttpResponse
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from dashboard.models import Product, Order
from datetime import datetime

# Create your views here.
def register(request):
    if request.method == 'POST':
        form = CreateUserForm(request.POST)
        if form.is_valid():
            form.save()
            username = form.cleaned_data.get('username')
            messages.success(request, f'Account has been created for {username}. Continue to log in')
            return redirect('user-login')
    else:
        form = CreateUserForm()
    context = {
        'form': form,
    }
    return render(request, 'user/register.html', context)

def custom_logout(request):
    logout(request)
    return render(request, 'user/logout.html')

def profile(request):
    return render(request, 'user/profile.html')

def profile_update(request):
    if request.method=='POST':
        user_form = UserUpdateForm(request.POST, instance=request.user)
        profile_form = ProfileUpdateForm(request.POST, request.FILES, instance=request.user.profile)
        if user_form.is_valid() and profile_form.is_valid():
            user_form.save()
            profile_form.save()
            return redirect('user-profile')
    else:
        user_form = UserUpdateForm(instance=request.user)
        profile_form = ProfileUpdateForm(instance=request.user.profile )
    context={
        'user_form': user_form,
        'profile_form': profile_form,
    }
    return render(request, 'user/profile_update.html', context)

def get_product_details(request, product_id):
    try:
        product = Product.objects.get(id=product_id)
        data = {
            'price_each': product.price_each,
            'image_url': product.image.url if product.image else None,
        }
        return JsonResponse(data)
    except Product.DoesNotExist:
        return JsonResponse({'error': 'Product not found'}, status=404)

@login_required
def delete_order(request, pk):
    order = get_object_or_404(Order, pk=pk)

    if order.staff == request.user:
        order.delete()

    return redirect('dashboard-index')

def generate_order_report(request):

    orders = Order.objects.filter(staff=request.user)

    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="order_report.pdf"'

    pdf = canvas.Canvas(response, pagesize=letter)
    width, height = letter

    #TITLE
    pdf.setFont("Helvetica-Bold", 16)
    pdf.drawString(200, height - 50, "Order Report")

    pdf.setFont("Helvetica", 12)
    pdf.drawString(30, height - 80, f"Generated by: {request.user.username}")
    pdf.drawString(30, height - 100, f"Generated on: {datetime.now().strftime('%Y-%m-%d')}")

    pdf.line(20, height - 110, 580, height - 110)

    y_position = height - 140
    pdf.setFont("Helvetica-Bold", 12)
    pdf.drawString(50, y_position, "Product Name")
    pdf.drawString(250, y_position, "Quantity")
    pdf.drawString(400, y_position, "Date")
    pdf.line(20, y_position - 5, 580, y_position - 5)

    y_position -= 30
    pdf.setFont("Helvetica", 10)

    for order in orders:
        if y_position < 50:  # Check for page overflow
            pdf.showPage()
            pdf.setFont("Helvetica-Bold", 16)
            pdf.drawString(200, height - 50, "Order Report (Continued)")
            pdf.setFont("Helvetica-Bold", 12)
            pdf.drawString(50, height - 80, "Product Name")
            pdf.drawString(250, height - 80, "Quantity")
            pdf.drawString(400, height - 80, "Date")
            pdf.line(20, height - 85, 580, height - 85)
            y_position = height - 110
            pdf.setFont("Helvetica", 10)

        pdf.drawString(50, y_position, order.Product.name)
        pdf.drawString(250, y_position, str(order.order_quantity))
        pdf.drawString(400, y_position, order.date.strftime('%Y-%m-%d'))
        y_position -= 20

    pdf.save()
    return response

def download_product_report(request):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename="product_report.pdf"'

    c = canvas.Canvas(response, pagesize=letter)
    width, height = letter

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawString(100, height - 50, "Product Report")

    # Table Headers
    c.setFont("Helvetica-Bold", 12)
    c.drawString(30, height - 100, "Name")
    c.drawString(160, height - 100, "Category")
    c.drawString(290, height - 100, "Quantity")
    c.drawString(370, height - 100, "Price (NPR)")
    c.drawString(460, height - 100, "Supplier")

    y = height - 130
    c.setFont("Helvetica", 10)

    products = Product.objects.all()
    for product in products:
        c.drawString(30, y, product.name if product.name else "N/A")
        c.drawString(160, y, product.category if product.category else "N/A")
        c.drawString(290, y, str(product.quantity) if product.quantity else "N/A")
        c.drawString(370, y, f"{product.price_each}" if product.price_each else "N/A")
        c.drawString(460, y, f"{product.supplier}" if product.supplier else "N/A")
        y -= 20
        if y < 50: 
            c.showPage()
            y = height - 50

    c.save()
    return response